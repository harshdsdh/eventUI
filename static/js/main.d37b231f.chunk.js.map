{"version":3,"sources":["NavArea.js","content.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavArea","className","href","data","Content","useState","events","setEvents","useEffect","map","d","key","id","classname","name","price","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAmCeA,G,KAlCD,WACV,OACI,yBAAKC,UAAU,OAEf,4BACA,yBAAKA,UAAU,YAEX,4BACI,uBAAGC,KAAK,KAAR,UAEJ,4BACI,uBAAGA,KAAK,KAAR,YAEJ,4BACI,uBAAGA,KAAK,KAAR,gBAKR,yBAAKD,UAAU,aAEX,4BACI,uBAAGC,KAAK,KAAR,UAEJ,4BACI,gCACI,8BAAM,uBAAGA,KAAK,KAAR,mB,OCzBpBC,EAAK,CACP,CACI,GAAK,EACL,KAAO,UACP,MAAQ,IAEZ,CACI,GAAK,EACL,KAAO,UACP,MAAQ,IAEZ,CACI,GAAK,EACL,KAAO,UACP,MAAQ,KA2BDC,EAxBD,WAAK,IAAD,EACeC,mBAAS,IADxB,mBACPC,EADO,KACCC,EADD,KAMd,OAJAC,qBAAU,WACND,EAAUJ,KACZ,IAGE,yBAAKF,UAAU,gBACX,sDAGA,4BAEIK,EAAOG,KAAI,SAAAC,GACP,OACA,wBAAIC,IAAKD,EAAEE,GAAIC,UAAU,cACrB,uBAAGX,KAAK,KAAKQ,EAAEI,KAAf,OAAyBJ,EAAEK,cCxBpCC,EAVF,WACT,OACI,wBAAIf,UAAU,UACV,gCAAK,uBAAGC,KAAK,KAAR,UACL,gCAAK,uBAAGA,KAAK,KAAR,YACL,4BAAI,uBAAGA,KAAK,KAAR,c,MCeDe,MAff,WACE,OACE,yBAAKhB,UAAU,OACb,6BACA,yBAAKA,UAAU,WACf,kBAAC,EAAD,CAASA,UAAU,YACnB,kBAAC,EAAD,CAASA,UAAU,YACnB,kBAAC,EAAD,CAAQA,UAAU,eCDJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d37b231f.chunk.js","sourcesContent":["import React from \"react\";\r\nconst NavArea=()=>{\r\n    return(\r\n        <div className='nav'>\r\n            \r\n        <ul>\r\n        <div className='nav-left'>\r\n            \r\n            <li>\r\n                <a href='#'>About</a>\r\n            </li>\r\n            <li>\r\n                <a href='#'>Join Us</a>\r\n            </li>\r\n            <li>\r\n                <a href='#'>Contact Us</a>\r\n            </li>\r\n            </div>\r\n        \r\n        \r\n        <div className='nav-right'>\r\n        \r\n            <li>\r\n                <a href='#'>Login</a>\r\n            </li>\r\n            <li>\r\n                <button>\r\n                    <span><a href='#'>Sign Up</a></span></button>\r\n            </li>\r\n        </div>\r\n        </ul>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default NavArea","import React,{useState, useEffect} from \"react\";\r\n\r\nconst data=[\r\n    {\r\n        \"id\":1,\r\n        \"name\":\"Event 1\",\r\n        \"price\":12\r\n    },\r\n    {\r\n        \"id\":2,\r\n        \"name\":\"Event 2\",\r\n        \"price\":11\r\n    },\r\n    {\r\n        \"id\":3,\r\n        \"name\":\"Event 3\",\r\n        \"price\":15\r\n    }\r\n]\r\nconst Content=()=>{\r\n    const [events, setEvents]  = useState([])\r\n    useEffect(()=>{\r\n        setEvents(data)\r\n    },[])\r\n\r\n    return (\r\n        <div className='main-content'>\r\n            <h1>\r\n                Explore Virtual Events\r\n            </h1>\r\n            <ul>\r\n                {\r\n                events.map(d=>{\r\n                    return(\r\n                    <li key={d.id} classname='event-list'>\r\n                        <a href='#'>{d.name} - ${d.price}</a></li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Content","import React from 'react';\r\nconst Footer=()=>{\r\n    return(\r\n        <ul className='footer'>\r\n            <li> <a href='#'>About</a></li>\r\n            <li> <a href='#'>Join Us</a></li>\r\n            <li><a href='#'>Contact</a></li>\r\n        </ul>\r\n    )\r\n\r\n}\r\nexport default Footer","import React from 'react';\nimport NavArea from './NavArea'\nimport Content from './content'\nimport Footer from './Footer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n      <div className='wrapper'>\n      <NavArea className='navarea'/>\n      <Content className='content'/>\n      <Footer className='footer'/>\n      </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}